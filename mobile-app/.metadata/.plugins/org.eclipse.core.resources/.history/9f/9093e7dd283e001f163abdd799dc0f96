package com.shopping.ws.controller;

import javax.validation.Valid;

//import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import jakarta.validation.constraints.Size;

import com.shopping.ws.rest.model.request.UserRequestModel;
import com.shopping.ws.rest.model.response.UserResponseModel;



@RestController
@RequestMapping("/users")
public class MobileController {
	Logger LOGGER = LoggerFactory.getLogger(MobileController.class);
	
	@GetMapping() // http://localhost:5000/user?page=1&limit=50[[[display 50 row on 1 page]]]
	public String getUsers(@RequestParam(value= "page",defaultValue = "1") int page,
			@RequestParam(value = "limit", defaultValue = "100") int limit,
			@RequestParam(value = "sort", required = false) String sort){//Default value in case we miss any required parameters
		return "get user was called with page: " +page + " limit: "+limit +" sort: "+sort;
	}
	
	
	
	// http://localhost:5000/users/f2dddff295e <-- part of URL
	@GetMapping(path="/{userId}", 
			produces = {MediaType.APPLICATION_JSON_VALUE , MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<UserResponseModel> getUser(@PathVariable String userId) {// to extract value for URL for single user details
		UserResponseModel re = new UserResponseModel();
		re.setFirstName("Jack");
		re.setLastName("Toki");
		re.setEmail("jack@toki.com");
		LOGGER.debug("New User Response created!");
		return new ResponseEntity<UserResponseModel>(re,HttpStatus.OK); // return status OK and object
		//return new ResponseEntity<UserResponseModel>(HttpStatus.BAD_REQUEST);  // to return BAD.request response
		//return new ResponseEntity<UserResponseModel>(HttpStatus.ALREADY_REPORTED); // Already Reported (WebDAV) (RFC 5842)
		//return new ResponseEntity<UserResponseModel>(HttpStatus.METHOD_NOT_ALLOWED);  // 405   Method Not Allowed
		//return new ResponseEntity<UserResponseModel>(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE); // 416  Requested Range Not Satisfiable
	}
	
	
	
	@PostMapping(//path = "/create", 
			consumes = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE },		
			produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})	
	public ResponseEntity<UserResponseModel> createUser(@Valid @RequestBody UserRequestModel request) {
		UserResponseModel re = new UserResponseModel();
		re.setFirstName(request.getFirstName());
		re.setLastName(request.getLastName());
		re.setEmail(request.getEmail());	
		return new ResponseEntity<UserResponseModel>(re,HttpStatus.OK);
	}
	
	
	
	
	@PutMapping
	public String updateUser() {
		return "get Name Method Called";
	}
	
	
	
	
	@DeleteMapping
	public String deleteUser() {
		return "get Name Method Called";
	}

}
